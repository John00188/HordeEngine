name: ops-flyover
on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes
  workflow_dispatch: {}       # run on demand
permissions:
  contents: write
concurrency:
  group: ops-flyover
  cancel-in-progress: false

jobs:
  flyover:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Seed orders + reconcile
        run: |
          set -e
          python - << 'PY'
          import json, pathlib, datetime
          repo = pathlib.Path('.')
          ops = repo/'ops'
          comms = ops/'comms.json'
          log   = ops/'log.md'
          locks = ops/'locks'
          locks.mkdir(parents=True, exist_ok=True)

          def nowz():
              return datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')

          data = json.loads(comms.read_text(encoding='utf-8'))
          lines = log.read_text(encoding='utf-8').splitlines()

          # --- reconcile states from log into comms
          latest = {}
          for ln in lines:
              # match "• <agent> • <id> • ..."
              if '•' in ln:
                  parts = [p.strip() for p in ln.split('•')]
                  if len(parts) >= 4:
                      _, agent, wid, rest = parts[:4]
                      latest[wid] = (agent, rest, ln)
          changed = False
          for wi in data.get('work_items', []):
              wid = wi['id']
              agent_rest_ln = latest.get(wid)
              if not agent_rest_ln: continue
              agent, rest, ln = agent_rest_ln
              old = wi['state']
              if 'PR opened ' in rest:
                  url = rest.split('PR opened ',1)[1].split()[0]
                  if wi.get('pr') != url or wi['state'] != 'review':
                      wi['pr'] = url; wi['state']='review'; changed=True
              elif 'merged' in rest and wi['state']!='merged':
                  wi['state']='merged'; changed=True
          if changed:
              data['updated_at']=nowz()
              comms.write_text(json.dumps(data, indent=2), encoding='utf-8')
              lines.append(f"{nowz()} • ops • reconciled from log.md")

          # --- seed orders if none exist
          have_orders = any('FLYOVER' in ln for ln in lines)
          if not have_orders:
              def order(id, focus, title, body):
                  ts=nowz()
                  lines.append(f"{ts} FLYOVER • order • {id} • claim")
                  lines.append(f"{ts} FLYOVER • order • {id} • focus: {focus}")
                  lines.append(f"{ts} FLYOVER • order • {id} • pr: title='{title}' body='{body}'")
                  # mirror a short note
                  for wi in data['work_items']:
                      if wi['id']==id:
                          wi.setdefault('notes', []).append(f"{ts} flyover: ordered claim/focus/pr")
              order('docs',
                    'add README badges + Quickstart; add/refresh CONTRIBUTING.md; append CHANGELOG v0.2.5',
                    'docs: badges, Quickstart, CONTRIBUTING, CHANGELOG v0.2.5',
                    'Badges + Quickstart + contributing and changelog.')
              order('ops-validate',
                    'add .github/workflows/ops-validate.yml (ubuntu-latest; python json.load on ops/comms.json); fail on invalid JSON; no secrets',
                    'ci: validate ops/comms.json on PRs',
                    'Adds a tiny JSON lint workflow to keep the ops bus healthy.')
              data['updated_at']=nowz()
              comms.write_text(json.dumps(data, indent=2), encoding='utf-8')
              log.write_text('\n'.join(lines)+'\n', encoding='utf-8')

          PY
      - name: Commit & push ops changes (if any)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add ops/log.md ops/comms.json || true
            git commit -m "ops: flyover reconcile/seed [bot]"
            git push
          fi
